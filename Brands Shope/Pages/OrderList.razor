@page "/orders"
@inject OrderService OrderService

<h3 class="text-center mt-3 text-primary">Orders</h3>

<div class="container mt-4 mb-3">
    <div class="row mb-3">
        <div class="col-md-3">
            <label>Start Date:</label>
            <InputDate @bind-Value="startDate" class="form-control" />
        </div>
        <div class="col-md-3">
            <label>End Date:</label>
            <InputDate @bind-Value="endDate" class="form-control" />
        </div>
        <div class="col-md-3">
            <label>Search by Customer:</label>
            <InputText @bind-Value="searchTerm" class="form-control" placeholder="Enter customer name" />
        </div>
        <div class="col-md-3 d-flex align-items-end">
            <button class="btn btn-primary me-2" @onclick="ApplyFilter">Apply Filter</button>
            <button class="btn btn-secondary" @onclick="ResetFilter">Reset Filter</button>
        </div>
    </div>

    @if (pagedOrders == null || !pagedOrders.Any())
    {
        <p class="text-muted">No orders found.</p>
    }
    else
    {
        <table class="table table-bordered">
            <thead class="table-light">
                <tr>
                    <th @onclick="() => SortByColumn(nameof(Order.Id))" style="cursor:pointer">Order ID @SortIcon(nameof(Order.Id))</th>
                    <th @onclick="() => SortByColumn(nameof(Order.CustomerName))" style="cursor:pointer">Customer @SortIcon(nameof(Order.CustomerName))</th>
                    <th @onclick="() => SortByColumn(nameof(Order.OrderDate))" style="cursor:pointer">Order Date @SortIcon(nameof(Order.OrderDate))</th>
                    <th @onclick="() => SortByColumn(nameof(Order.TotalAmount))" style="cursor:pointer">Total Amount ($) @SortIcon(nameof(Order.TotalAmount))</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in pagedOrders)
                {
                    <tr>
                        <td>@order.Id</td>
                        <td>@order.CustomerName</td>
                        <td>@order.OrderDate.ToString("dd/MM/yyyy")</td>
                        <td>@order.TotalAmount.ToString("0.00")</td>
                    </tr>
                }
            </tbody>
        </table>

        <nav>
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                </li>

                @for (int i = 1; i <= totalPages; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                    </li>
                }

                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                </li>
            </ul>
        </nav>
    }
</div>

@code {
    private DateTime? startDate = DateTime.Today;
    private DateTime? endDate = DateTime.Today;
    private string? searchTerm;
    private List<Order>? orders;
    private List<Order>? pagedOrders;

    private int pageSize = 5;
    private int currentPage = 1;
    private int totalPages = 1;

    private string? sortColumn;
    private bool sortAscending = true;

    [Inject] public IJSRuntime JS { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        orders = await OrderService.GetOrders(startDate, endDate, searchTerm);
        Paginate();       
        ApplySorting();   
    }

    private async Task ApplyFilter()
    {
        if (startDate > endDate)
        {
            await JS.InvokeVoidAsync("alert", "Start date must be before end date.");
            return;
        }

        currentPage = 1;
        await LoadOrders();
    }

    private async Task ResetFilter()
    {
        startDate = DateTime.Today;
        endDate = DateTime.Today;
        searchTerm = string.Empty;
        currentPage = 1;
        await LoadOrders();
    }

    private void ChangePage(int page)
    {
        if (page < 1 || page > totalPages)
            return;

        currentPage = page;
        Paginate();
        ApplySorting(); 
        StateHasChanged();
    }

    private void Paginate()
    {
        if (orders == null || orders.Count == 0)
        {
            pagedOrders = new();
            totalPages = 1;
            return;
        }

        totalPages = (int)Math.Ceiling((double)orders.Count / pageSize);

        if (currentPage > totalPages)
            currentPage = totalPages;

        pagedOrders = orders
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void SortByColumn(string column)
    {
        if (sortColumn == column)
            sortAscending = !sortAscending;
        else
        {
            sortColumn = column;
            sortAscending = true;
        }

        ApplySorting(); 
    }

    private void ApplySorting()
    {
        if (pagedOrders == null || string.IsNullOrEmpty(sortColumn)) return;

        pagedOrders = sortColumn switch
        {
            nameof(Order.Id) => sortAscending ? pagedOrders.OrderBy(o => o.Id).ToList() : pagedOrders.OrderByDescending(o => o.Id).ToList(),
            nameof(Order.CustomerName) => sortAscending ? pagedOrders.OrderBy(o => o.CustomerName).ToList() : pagedOrders.OrderByDescending(o => o.CustomerName).ToList(),
            nameof(Order.OrderDate) => sortAscending ? pagedOrders.OrderBy(o => o.OrderDate).ToList() : pagedOrders.OrderByDescending(o => o.OrderDate).ToList(),
            nameof(Order.TotalAmount) => sortAscending ? pagedOrders.OrderBy(o => o.TotalAmount).ToList() : pagedOrders.OrderByDescending(o => o.TotalAmount).ToList(),
            _ => pagedOrders
        };
    }

    private MarkupString SortIcon(string column)
    {
        if (sortColumn != column)
            return new MarkupString("");

        var icon = sortAscending ? "↓" : "↑";
        return new MarkupString($"<span>{icon}</span>");
    }
}
